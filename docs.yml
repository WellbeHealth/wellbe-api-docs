openapi: '3.0.2'
info:
  title: Wellbe API
  version: '1.0'
servers:
  - url: https://api.wellbe.club/api/v1
  - url: https://poly.wellbe.club/api/v1
  - url: https://localhost/api/v1
tags:
  - name: users
    description: Work with users data
  - name: events
    description: Manage event
  - name: label
    description: Manage labels
  - name: color
    description: Colors HEX
  - name: experts
    description: Expert Profiles
  - name: orders
    description: Заказы
  - name: forms
    description: Формы
  - name: products
    description: Товары
  - name: recommendations
    description: Рекомендации
  - name: surveys
    description: Анкеты
  - name: reviews
    description: Отзывы
  - name: billing
    description: Биллинг

components:
  schemas:
    surveyanswers:
      type: object
      properties:
        answers:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
                description: 'key'
                example: 'key1'
              value:
                type: object
                properties:
                  content:
                    type: string
                    example: 'hello'
    get_products:
      type: object
      properties:
        products:
          type: array
          items:
            type: integer
            description: "product_id"
          example: [1,2]
    order:
      type: object
      properties:
        order_positions:
          type: array 
          items:
            type: object
            properties:
              product_id:
                type: integer
                description: "product_id"
              count:
                type: integer
          example: [{"product_id":1,"count":1}]
        is_closed:
          type: boolean
        info:
          type: object
          description: "jsondata"
        user:
          type: integer
          description: 'user_id'
          example: null
        month:
          type: integer
          description: 'Количество месяцев'
          example: 1
    vitamins:
      type: object
      properties:
        jsondata:
          type: object
          properties:
            jsondata:
              type: object
              properties:
                name:
                  type: "string"
                labels:
                  type: array
                  items:
                    type: integer
    payment_action:
      type: object
      properties:
        payment_id:
          type: integer
          example: 1
    checkup_booking:
      type: object
      properties:
        jsondata:
          type: object
          properties:
            product_uuid:
              type: string
              description: Not Null
              example: "56e09589-1fb2-46ce-a7d4-6eafd60997e8"
            email:
              type: string
              description: Allowed null
              example: null
            selected_time:
              type: string
              description: Allowed null
              example: null
            name:
              type: string
              description: Allowed null
              example: null
            jsondata:
              type: object
              example: null
                
    phone_auth:
      type: object
      properties:
        phone:
          type: string
          example: '+79920181131'
          description: 'Работает только с номерами на +7'
    phone_login:
      type: object
      properties:
        phone:
          type: string
          example: '+79920181131'
          description: 'Работает только с номерами на +7'
        code:
          type: string
          example: '5201'
          description: 'Всегда 4-значный код'
    get_timetable:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        start_time:
          type: string
          example: '2021-02-22'
        finish_time:
          type: string
          example: '2021-03-22'
    create_timetable:
      type: object
      properties:
        user_id:
          type: integer
        timezone:
          type: integer
        table:
          type: object
          properties:
            Monday:
              type: array
              items:
                type: object
                properties:
                  start_time:
                    type: string
                    example: '15:00'
                  finish_time:
                    type: string
                    example: '15:00'
            Tuesday:
              type: array
              items:
                type: object
                properties:
                  start_time:
                    type: string
                    example: '15:00'
                  finish_time:
                    type: string
                    example: '15:00'
            Wednesday:
              type: array
              items:
                type: object
                properties:
                  start_time:
                    type: string
                    example: '15:00'
                  finish_time:
                    type: string
                    example: '15:00'
            Thursday:
              type: array
              items:
                type: object
                properties:
                  start_time:
                    type: string
                    example: '15:00'
                  finish_time:
                    type: string
                    example: '15:00'
            Friday:
              type: array
              items:
                type: object
                properties:
                  start_time:
                    type: string
                    example: '15:00'
                  finish_time:
                    type: string
                    example: '15:00'
            Saturday:
              type: array
              items:
                type: object
                properties:
                  start_time:
                    type: string
                    example: '15:00'
                  finish_time:
                    type: string
                    example: '15:00'
            Sunday:
              type: array
              items:
                type: object
                properties:
                  start_time:
                    type: string
                    example: '15:00'
                  finish_time:
                    type: string
                    example: '15:00'
    expert_booking_form:
      type: object
      properties:
        jsondata:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
            name:
              type: string
            date:
              type: string
              example: "ISO STRING"
            expert_profile:
              type: integer
              description: 'Id профиля спеца'
            labels:
                  type: array
                  items:
                    type: integer
                    description: label_id
                  example: [1,2]
            json_data:
              type: object
              properties:
                age:
                  type: integer
                  example: 67
                weight:
                  type: integer
                  example: 67
                height:
                  type: integer
                  example: 167
                gender:
                  type: string
                  example: "female"
                message:
                  type: string
                  example: "ВИТАЛИК"
    refresh:
      type: object
      properties:
        refresh:
          type: string
    event_slaves:
      type: object
      properties:
        event_slaves:
          type: array
          items:
            type: integer
            description: 'user_id'
    label:
      type: object
      properties:
        color:
          type: integer
          description: color_id
        hidden_for_client:
          type: boolean
        label_text:
          type: string
    label_event:
      type: object
      properties:
        user_id:
          type: integer
        label_id:
          type: integer
    label_user:
      type: object
      properties:
        user_id:
          type: integer
        label_id:
          type: integer
    add_expert:
      type: object
      properties:
        experts:
          type: array
          items:
            type: integer
            description: 'user_id'
            example: '[1,2,3]'
    google_auth:
      type: object
      properties:
        auth_token:
          type: string
          description: google id
    refresh_password:
      type: object
      properties:
        password:
          type: string
    reset_password:
      type: object
      properties:
        email:
          type: string
          example: 'example@mail.com'
        redirect_url:
          type: string
          example: 'app.wellbe.club'  
    jwt_tokens:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
    auth:
      type: object
      properties:
        email:
          type: string
        password:
          type: string  
    emailcheck:
      type: object
      properties:
        email:
          type: string
    registrition:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
    event:
      type: object
      properties:
        start_time:
          type: string
          description: 'iso date time'
          example: '2021-02-15T15:00+05:00'  
        stop_time:
          type: string
          description: 'iso date time'
          example: '2021-02-15T15:00+05:00'  
        external_link_to_event:
          type: string
          description: 'external url'
          example: 'https://vk.com'
        is_public:
          type: boolean
          description: ''
        event_master:
          type: integer
          description: 'user_id'
        event_name:
          type: string
          description: ''
        event_slaves:
          type: array
          description: ''
          items:
            type: integer
            description: 'user_id'
        labels:
          type: array
          description: ''
          items:
            type: integer
            description: 'label_id'
          
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header

paths:
  /users/auth/sign_up/check_email/:
    post:
        description: 'Проверяет, доступен ли такой емаил в системе'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emailcheck'
        responses:
          '202':
            description: Not already used - OK
          '403':
            description: Already used
          '400':
            description: Invalid request 
        tags:
          - users

  /users/auth/sign_up/me/:
    post:
        description: 'Регистрирует пользователя'
        parameters:
        - in: query
          name: redirect_url
          description: Домен, на который должна вести ссылка из письма с подтверждением
          required: true
          schema:
            type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registrition'
        responses:
          '201':
            description: User created
          '400':
            description: Invalid request 
        tags:
          - users

  /users/auth/sign_up/confirm_email/:
    post:
        description: 'Повторно отправляет письмо с ссылкой для подтверждения аккаунта'
        parameters:
        - in: query
          name: redirect_url
          description: Домен, на который должна вести ссылка из письма с подтверждением
          required: true
          schema:
            type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registrition'
        responses:
          '201':
            description: User created
          '400':
            description: Invalid request 
        tags:
          - users

  /users/auth/sign_up/confirm_email/{token}:
    get:
      description: 'Подтверждает аккаунт'
      parameters:
      - in: path
        description: Token from confirmation email
        required: true
        name: token
        schema:
          type: string
      responses:
        '200':
          description: Confirmed
        '400':
          description: Bad Token
      tags:
        - users
  /social/phone/:
    post:
        description: 'Вход в систему по номеру телефона, если номера нет, регается юзер'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/phone_auth"
        responses:
          '200':
            description: Пользователь существует, код отправлен
          '201':
            description: Новый пользователь создан, код отправлен   
        tags:
          - users
  /social/phone/auth:
    post:
        description: 'Вход в систему по номеру телефона, если номера нет, регается юзер'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/phone_login"
        responses:
          '200':
            description: Вход выполнен, токены отправлены
          '401':
            description: Вход не выполнен, подробности в msg
        tags:
          - users

  /users/auth/sign_in/:
    post:
      description: Вход в систему
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth'
      responses:
        '200':
          description: Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jwt_tokens'
        '401':
          description: Unauthorized
      tags:
        - users

  /users/auth/logout/:
    post:
      security:
        - Bearer: []
      description: Выход из системы
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refresh'
      responses:
        '204':
          description: Logged out
        '401':
          description: Unauthorized
      tags:
        - users
  
  /users/auth/sign_in/refresh:
    post:
      description: Обновить токен
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refresh'
      responses:
        '200':
          description: Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jwt_tokens'
        '401':
          description: Unauthorized
      tags:
        - users

  /users/auth/reset_password:
    post:
      description: 'Отправляет email с ссылкой для сброса пароля'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reset_password'
      responses:
        200:
          description: OK
        401:
          description: Bad request
      tags:
        - users

  /users/auth/reset_password/{reset_token}:
    post:
      description: 'Подтверждает аккаунт'
      parameters:
      - in: path
        description: Token from reset_password email
        required: true
        name: reset_token
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refresh_password'    
      responses:
        '200':
          description: password refreshed
        '400':
          description: Bad request
      tags:
        - users

  /users/auth/me:
    get:
      security: 
        - Bearer: []   
      description: 'Получить данные своего аккаунта'  
      responses:
        '200':
          description: password refreshed
        '400':
          description: Bad request
      tags:
        - users

  /users/info/{user_id}:
    get:
      security: 
        - Bearer: []   
      description: 'Получить данные аккаунта'
      parameters:
      - in: path
        description: user_id
        required: true
        name: user_id
        schema:
          type: integer  
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
      tags:
        - users

  /users/info/table:
    get:
      security: 
        - Bearer: []   
      description: 'Получить данные аккаунта'
      parameters:
      - in: query
        description: сколько пользователей выводить за один запрос
        required: false
        example: 50
        name: limit
        schema:
          type: integer
      - in: query
        description: номер страницы
        required: false
        example: 1
        name: page
        schema:
          type: integer
      - in: query
        description: показывать только тех клиентов, кто связан со мной 
        required: false
        example: false
        name: only_my_clients
        schema:
          type: boolean
      - in: query
        description: строка поиска, ищет по имени и почте
        required: false
        example: "Wellbe"
        name: q
        schema:
          type: string
      - in: query
        description: id роли
        required: false
        example: 1
        name: role_id
        schema:
          type: integer
      - in: query
        description: id специалиста
        required: false
        example: 1
        name: expert_id
        schema:
          type: integer
      - in: query
        description: id кама
        required: false
        example: 1
        name: coach_id
        schema:
          type: integer               

      responses:
        '200':
          description: OK
      tags:
        - users

  /users/{user_id}/experts:
    get:
      security: 
        - Bearer: []   
      description: 'Получить специалистов аккаунта'
      parameters:
      - in: path
        description: user_id
        required: true
        name: user_id
        schema:
          type: integer  
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
      tags:
        - users

    post:
      security: 
        - Bearer: []   
      description: 'Добавить специалистов'
      parameters:
      - in: path
        description: user_id
        required: true
        name: user_id
        schema:
          type: integer 
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/add_expert"
      responses:
        200:
          description: 'OK'
      tags:
        - users

    delete:
      security: 
        - Bearer: []   
      description: 'Удалить специалистов'
      parameters:
      - in: path
        description: user_id
        required: true
        name: user_id
        schema:
          type: integer 
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/add_expert"
      responses:
        200:
          description: 'OK'
      tags:
        - users

    put:
      security: 
        - Bearer: []   
      description: 'Заменить специалистов'
      parameters:
      - in: path
        description: user_id
        required: true
        name: user_id
        schema:
          type: integer 
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/add_expert"
      responses:
        200:
          description: 'OK'
      tags:
        - users              

  /social/google:
    post:
      description: 'Вход через гугл'
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/google_auth"
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
      tags:
        - users

  /events/create:
    post:
      security:
        - Bearer: []
      description: 'Создает ивент'
      requestBody:
        content:
          application/json:
            schema: 
              $ref:  "#/components/schemas/event"
      responses:
        200:
          description: 'OK'
      tags:
        - events

  /events/event/{event_id}:
    get:
      security:
        - Bearer: []
      parameters:
        - in: path
          required: true 
          name: event_id
          schema:
            type: integer
            description: 'event_id'
            example: 109
      responses:
        200:
          description: 'OK'
      tags:
        - events

    delete:
      security:
        - Bearer: []
      parameters:
        - in: path
          required: true 
          name: event_id
          schema:
            type: integer
            description: 'event_id'
            example: 109
      responses:
        200:
          description: 'OK'
        423:
          description: 'This user cant delete event'
      tags:
        - events

    patch:
      security:
        - Bearer: []
      parameters:
        - in: path
          required: true 
          name: event_id
          schema:
            type: integer
            description: 'event_id'
            example: 109
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/event"
      responses:
        200:
          description: 'OK'
        423:
          description: 'This user cant change event'
      tags:
        - events
  
  /events/event/{event_id}/add_users:
    post:
      security:
          - Bearer: []
      parameters:
        - in: path
          required: true 
          name: event_id
          schema:
            type: integer
            description: 'event_id'
            example: 109
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/event_slaves"
      responses:
        200:
          description: 'OK'
        423:
          description: 'This user cant change event'
      tags:
        - events

  /events/event/{event_id}/remove_users:
    delete:
      security:
          - Bearer: []
      parameters:
        - in: path
          required: true 
          name: event_id
          schema:
            type: integer
            description: 'event_id'
            example: 109
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/event_slaves"
      responses:
        200:
          description: 'OK'
        423:
          description: 'This user cant change event'
      tags:
        - events      

  /events/get_user_events/{user_id}:
    get:
      security:
        - Bearer: []
      parameters:
        - in: path
          required: true
          name: user_id
          schema:
            type: integer
      responses:
        200:
          description: 'OK'
      tags:
        - events

  /events/get_user_closest_event/{user_id}:
    get:
      security:
        - Bearer: []
      parameters:
        - in: path
          required: true
          name: user_id
          schema:
            type: integer
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad request'
      tags:
        - events

  /events/fake:
    post:
        security:
          - Bearer: []
        description: 'Фейк данные для календаря'
        responses:
          200:
            description: 'OK'
          400:
            description: 'Bad request'
        tags:
          - events
  /labels/label/actionlabeluser:
    post:
      security:
        - Bearer: []
      description: 'Добавляет метку пользователю'
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/label_user"
      responses:
        200:
          description: 'OK'
      tags:
        - label

    delete:
      security:
        - Bearer: []
      description: 'Удаляет метку у пользователя'
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/label_user"
      responses:
        200:
          description: 'OK'
      tags:
        - label

  /labels/label/actionlabelevent:
    post:
      security:
        - Bearer: []
      description: 'Добавляет метку событию'
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/label_event"
      responses:
        200:
          description: 'OK'
      tags:
        - label

    delete:
      security:
        - Bearer: []
      description: 'Удаляет метку у события'
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/label_event"
      responses:
        200:
          description: 'OK'
      tags:
        - label

  /labels/label/{label_id}:
    get:
      security: 
        - Bearer: []   
      description: 'Получить метку'
      parameters:
      - in: path
        description: label_id
        required: true
        name: label_id
        schema:
          type: integer  
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
      tags:
        - label

  /labels/:
    get:
      security: 
        - Bearer: []   
      description: 'Получить все метки'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
      tags:
        - label

    post:
      security:
        - Bearer: []
      description: 'Создать метку'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/label"
      responses:
        200:
          description: 'OK'
      tags:
        - label
  /colors:
    get:
      description: 'Получить все цвета'
      responses:
        200:
          description: 'OK'
      tags:
        - color
  /expert_profile/get_list:
    get:
      parameters:
      - in: query
        required: false
        name: labels
        schema:
          type: array
          items: 
            type: integer
            description: label_id
          example: 1,2,3
      - in: query
        required: false
        name: limit
        schema:
          type: integer
          example: 3
      - in: query
        required: false
        name: min_price
        schema:
          type: integer
          example: 1200
      - in: query
        required: false
        name: max_price
        schema:
          type: integer
          example: 2200
      - in: query
        required: false
        name: is_action_price
        schema:
          type: boolean
          example: false
        description: 'Цена по договоренности'
      responses:
        200:
          description: 'OK'
      tags:
        - experts
  /expert_profile/get_random_list:
    get:
      description: 'Выдает рандомных спецов'
      parameters:
        - in: query
          required: false
          name: limit
          schema:
            type: integer
            example: 3    
      responses:
        200:
          description: 'OK'
      tags:
        - experts
  /products/{product_id}:
    get:
      description: 'Дает данные о продукте'
      parameters:
        - in: path
          required: true
          name: product_id
          schema:
            type: integer
        - in: query
          required: false
          name: token
          description: 'Промокод'
          schema:
            type: string
            example: eblan  
      responses:
        200:
          description: 'OK'
  /texts/{text_id}:
    get:
      description: 'Дает строку текста'
      parameters:
        - in: path
          required: true
          name: text_id
          example: 1
          schema:
            type: integer
      responses:
        200:
          description: 'OK'
  /timetable/{user_id}:
    get:
      description: 'Дает график пользователя'
      parameters:
        - in: path
          required: true
          name: user_id
          example: 1
          schema:
            type: integer
      responses:
        200:
          description: 'OK'
  /timetable/:
    post:
      description: Создает график пользователю
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/create_timetable"
      responses:
        200:
          description: 'OK'
  /timetable/timetable:
    post:
      description: 'Получить расписание пользователя в диапазоне дат'
      parameters:
        - in: query
          name: include_events
          description: Включать ли в выдачу ивенты
          example: true
          schema:
            type: boolean
        - in: query
          name: include_timetable
          description: Включать ли в выдачу расписание. Если ивенты не включены, то слоты расписания будут без поправки на ивенты!
          example: true
          schema:
            type: boolean
        - in: query
          name: events_min_duration
          description: Фильтр по минимальной длине ивента
          example: 60
          schema:
            type: integer
        - in: query
          name: timetable_min_duration
          description: Фильтр по минимальной длине расписания
          example: 40
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/get_timetable"
      responses:
        200:
          description: 'OK'

  /worksheets/buying/expert_booking_form/:
    post:
      description: 'Сформировать счет для бронирования нутрициолога'
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/expert_booking_form"
      responses:
        200:
          description: 'OK'
      tags:
        - forms

  /worksheets/buying/recommendation:
    get:
      security:
        - Bearer: []
      description: 'Получить рекомендации по новой анкете'
      parameters:
        - in: query
          name: session_id
          description: session_id
          example: 7
          schema:
            type: integer
        - in: query
          name: change_user_name
          description: change_user_name
          example: 'true'
          schema:
            type: string
        - in: query
          name: change_user_email
          description: change_user_email
          example: 'true'
          schema:
            type: string
      responses:
        200:
          description: 'OK'
      tags:
        - forms
          

  /worksheets/buying/checkup_booking:
    post:
      security:
        - Bearer: []
      description: 'Сформировать счет для покупки чекапа'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/checkup_booking"
      responses:
        200:
          description: 'OK'
      tags:
        - forms

  /worksheets/buying/vitamins:
    post:
      security:
        - Bearer: []
      description: 'Сформировать счет для покупки витаминов'
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/vitamins"
      responses:
        200:
          description: 'OK'
      tags:
        - forms

  /orders/{order_uuid}:
    get:
      description: 'Получить данные заказа'
      parameters:
        - in: path
          required: true 
          name: order_uuid
          schema:
            type: string
            description: 'order_uuid'
            example: '539843f3-051a-4b19-9082-0376a6a18280'
      responses:
        200:
          description: 'OK'
      tags:
        - orders
    patch:
        description: 'Отредактировать заказ'
        parameters:
        - in: path
          required: true 
          name: order_uuid
          schema:
            type: string
            description: 'order_uuid'
            example: '539843f3-051a-4b19-9082-0376a6a18280'
        - in: query
          required: false 
          name: notify
          schema:
            type: string
            description: 'Send notify to telegram'
            example: 'True'
        requestBody:
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/order"      
        responses:
          200:
            description: 'OK'
        tags:
          - orders

  /orders/{order_uuid}/use_promocode:
    post:
        description: 'Применить промокод в заказ'
        parameters:
        - in: path
          required: true 
          name: order_uuid
          schema:
            type: string
            description: 'order_uuid'
            example: '539843f3-051a-4b19-9082-0376a6a18280'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                      token:
                        type: string
                        description: 'игорьлинк2021'

        responses:
          200:
            description: 'OK'
        tags:
          - orders

  /orders/:
      post:
        description: 'Создать заказ'
        parameters:
          - in: query
            required: false 
            name: notify
            schema:
              type: string
              description: 'Send notify to telegram'
              example: 'True'
        requestBody:
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/order"      
        responses:
          200:
            description: 'OK'
        tags:
          - orders
      
  
  /recommendations/{recommendation_uuid}:
    get:
      description: 'Получить данные рекомендации'
      parameters:
        - in: path
          required: true 
          name: recommendation_uuid
          schema:
            type: string
            description: 'recommendation_uuid'
            example: '539843f3-051a-4b19-9082-0376a6a18280'
      responses:
        200:
          description: 'OK'
      tags:
        - recommendations

  /products/search:
    get:
      description: 'Получить список продуктов'
      parameters:
      - in: query
        description: 'Строка поиска'
        required: false
        example: "жИзНь"
        name: q
        schema:
          type: string
      - in: query
        description: limit
        required: false
        example: 100
        name: limit
        schema:
          type: integer
      - in: query
        description: page
        required: false
        example: 1
        name: page
        schema:
          type: integer
      - in: query
        description: категории
        required: false
        example: 1
        name: category
        schema:
          type: array
          items: 
            type: string
            description: category name
            example: "Vitamins"

      responses:
        '200':
          description: OK
      tags:
        - products
  
  /products/products:
    post:
      description: 'Получить список продуктов'
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/get_products"
      responses:
        '200':
          description: OK
      tags:
        - products
  
  /products/cart/price:
    post:
      description: 'Посчитать сумму продуктов'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      product_id:
                        type: integer
                        description: 'product_id'
                        example: 1
                      count:
                        type: integer
                        example: 1
                token:
                  type: string
                  description: 'промокод'
                month:
                  type: integer
                  description: 'Месяцы, необязательное поле, по умолчанию 1'
      responses:
        '200':
          description: OK
      tags:
        - products
  
  /surveys/survey/{survey_uuid}:
    get:
      description: 'Сгенерировать сессию для анкеты'
      parameters:
        - in: path
          required: true 
          name: survey_uuid
          schema:
            type: string
            description: 'survey_uuid'
            example: '539843f3-051a-4b19-9082-0376a6a18280'
      responses:
        '200':
          description: OK
      tags:
        - surveys

  /surveys/session/{session_id}/current:
    get:
      description: 'Получить текущую страницу сессии'
      parameters:
        - in: path
          required: true 
          name: session_id
          schema:
            type: integer
            description: 'session_id'
            example: 4
      responses:
        '200':
          description: OK
      tags:
        - surveys
  
  /surveys/session/{session_id}/return:
    get:
      description: 'Вернуться на страницу назад в сессии'
      parameters:
        - in: path
          required: true 
          name: session_id
          schema:
            type: integer
            description: 'session_id'
            example: 4
      responses:
        '200':
          description: OK
      tags:
        - surveys
  
  /surveys/session/{session_id}/next:
    post:
      description: 'Отправить ответы и перейти на следующую страницу в сессии'
      parameters:
        - in: path
          required: true 
          name: session_id
          schema:
            type: integer
            description: 'session_id'
            example: 4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/surveyanswers"             
      responses:
        '200':
          description: OK
      tags:
        - surveys
  
  /surveys/session/{session_id}/return_with_save:
    post:
      description: 'Отправить ответы и перейти на предыдущую страницу в сессии'
      parameters:
        - in: path
          required: true 
          name: session_id
          schema:
            type: integer
            description: 'session_id'
            example: 4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/surveyanswers"             
      responses:
        '200':
          description: OK
      tags:
        - surveys
  
  /recommendations/detailed_recommendation/{detailed_recommendation_uuid}:
    get:
      description: 'Получить подробную рекомендацию'
      parameters:
        - in: path
          required: true 
          name: detailed_recommendation_uuid
          schema:
            type: string
            description: 'detailed_recommendation_uuid'
            example: '539843f3-051a-4b19-9082-0376a6a18280'
      responses:
        200:
          description: 'OK'
      tags:
        - recommendations
  
  /reviews:
    get:
      description: 'Получить отзывы'
      parameters:
      - in: query
        description: 'Строка поиска'
        required: false
        example: "жИзНь"
        name: q
        schema:
          type: string
      - in: query
        description: limit
        required: false
        example: 100
        name: limit
        schema:
          type: integer
      - in: query
        description: page
        required: false
        example: "Здоровье"
        name: page
        schema:
          type: integer
      - in: query
        description: названия лейблов
        required: false
        example: 1
        name: label_name
        schema:
          type: array
          items: 
            type: string
            description: label_name
            example: "Здоровье"

      responses:
        '200':
          description: OK
      tags:
        - reviews
  
  /billing/get_accounts:
    get:
      description: 'Получить счета пользователя'
      responses:
        '200':
          description: OK
      tags:
        - billing
  
  /billing/account/{account_id}/history:
    get:
      security:
        - Bearer: []
      description: 'Получить финансовую историю'
      parameters:
      - in: path
        required: true 
        name: account_id
        schema:
          type: integer
          description: 'account_id'
          example: 1
      - in: query
        description: limit
        required: false
        example: 100
        name: limit
        schema:
          type: integer
      - in: query
        description: page
        required: false
        example: "Здоровье"
        name: page
        schema:
          type: integer

      responses:
        '200':
          description: OK
      tags:
        - billing
  
  /billing/account/{account_id}/promocodes:
    get:
      security:
        - Bearer: []
      description: 'Получить все промокоды'
      parameters:
      - in: path
        required: true 
        name: account_id
        schema:
          type: integer
          description: 'account_id'
          example: 1

      responses:
        '200':
          description: OK
      tags:
        - billing
  
  /billing/account/{account_id}/sum:
    get:
      security:
        - Bearer: []
      description: 'Получить текущий баланс акка'
      parameters:
      - in: path
        required: true 
        name: account_id
        schema:
          type: integer
          description: 'account_id'
          example: 1

      responses:
        '200':
          description: OK
      tags:
        - billing
  
  /billing/account/{account_id}/withdraw_request:
    get:
      security:
        - Bearer: []
      description: 'Запросить списание денег'
      parameters:
      - in: path
        required: true 
        name: account_id
        schema:
          type: integer
          description: 'account_id'
          example: 1

      responses:
        '200':
          description: OK
      tags:
        - billing
