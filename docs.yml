openapi: '3.0.2'
info:
  title: Wellbe API
  version: '1.0'
servers:
  - url: https://api.wellbe.app/api/v1
  - url: https://api.wellbe.app/
  - url: https://poly.wellbe.app/api/v1
  - url: https://poly.wellbe.app/
  - url: https://localhost/api/v1
tags:
  - name: users
    description: Work with users data
  - name: label
    description: Manage labels
  - name: products
    description: Товары
  - name: surveys
    description: Анкеты
  - name: beauty-twins
    description: Близнецы
  - name: community
    description: Сообщество
  - name: billing
  - name: referals

components:
  schemas:
    diary-action:
      type: object
      properties:
        products:
          type: array
          items:
            type: integer
            description: product_id
    diary:
      type: object
      properties:
        category:
          type: string
          example: main
        name:
          type: string
          example: diary_name
        owner:
          type: integer
          description: user_id
          example: 1
        is_public:
          type: boolean
        products:
          type: array
          items:
            type: integer
            description: product_id
        created_at:
          type: string
          description: 'ISO datetime'
          example: '2021-11-09T10:52:44.751187Z'
        updated_at:
          type: string
          description: 'ISO datetime'
          example: '2021-11-09T10:52:44.751187Z'
    surveyanswers:
      type: object
      properties:
        answers:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
                description: 'key'
                example: 'key1'
              value:
                type: string
                example: 'hello'
    address:
      type: object
      properties:
        user:
          type: integer
          description: "User id"
        city:
          type: string
        street:
          type: string
        house:
          type: string
        building:
          type: string
        housing:
          type: string
        entrance:
          type: string
        flat:
          type: string
        floor:
          type: string
    get_products:
      type: object
      properties:
        products:
          type: array
          items:
            type: integer
            description: "product_id"
          example: [1,2]
    order:
      type: object
      properties:
        order_positions:
          type: array 
          items:
            type: object
            properties:
              product_id:
                type: integer
                description: "product_id"
              count:
                type: integer
          example: [{"product_id":1,"count":1}]
        is_closed:
          type: boolean
        info:
          type: object
          description: "jsondata"
        user:
          type: integer
          description: 'user_id'
          example: null
        month:
          type: integer
          description: 'Количество месяцев'
          example: 1
    vitamins:
      type: object
      properties:
        jsondata:
          type: object
          properties:
            jsondata:
              type: object
              properties:
                name:
                  type: "string"
                labels:
                  type: array
                  items:
                    type: integer
    payment_action:
      type: object
      properties:
        payment_id:
          type: integer
          example: 1
    checkup_booking:
      type: object
      properties:
        jsondata:
          type: object
          properties:
            product_uuid:
              type: string
              description: Not Null
              example: "56e09589-1fb2-46ce-a7d4-6eafd60997e8"
            email:
              type: string
              description: Allowed null
              example: null
            selected_time:
              type: string
              description: Allowed null
              example: null
            name:
              type: string
              description: Allowed null
              example: null
            jsondata:
              type: object
              example: null
                
    phone_auth:
      type: object
      properties:
        phone:
          type: string
          example: '+79920181131'
          description: 'Работает только с номерами на +7'
    phone_login:
      type: object
      properties:
        phone:
          type: string
          example: '+79920181131'
          description: 'Работает только с номерами на +7'
        code:
          type: string
          example: '5201'
          description: 'Всегда 4-значный код'
    refresh:
      type: object
      properties:
        grant_type:
          type: string
          example: "refresh_token"
        client_id:
          type: string
          example: "zywAufNhTAhF6z3KHsIqBkdjspSDH9J2DXWFDlyR"
        client_secret:
          type: string
          example: "zywAufNhTAhF6z3KHsIqBkdjspSDH9J2DXWFDlyR"
        refresh_token:
          type: string
          example: "zywAufNhTAhF6z3KHsIqBkdjspSDH9J2DXWFDlyR"
    social:
      type: object
      properties:
        grant_type:
          type: string
          example: "convert_token"
        client_id:
          type: string
          example: "zywAufNhTAhF6z3KHsIqBkdjspSDH9J2DXWFDlyR"
        client_secret:
          type: string
          example: "zywAufNhTAhF6z3KHsIqBkdjspSDH9J2DXWFDlyR"
        backend:
          type: string
          example: "apple-id"
        token:
          type: string
          example: "zywAufNhTAhF6z3KHsIqBkdjspSDH9J2DXWFDlyR"
    label:
      type: object
      properties:
        color:
          type: integer
          description: color_id
        hidden_for_client:
          type: boolean
        label_text:
          type: string
    label_user:
      type: object
      properties:
        user_id:
          type: integer
        label_id:
          type: integer
    add_expert:
      type: object
      properties:
        experts:
          type: array
          items:
            type: integer
            description: 'user_id'
            example: '[1,2,3]'
    google_auth:
      type: object
      properties:
        auth_token:
          type: string
          description: google id
    refresh_password:
      type: object
      properties:
        password:
          type: string
    reset_password:
      type: object
      properties:
        email:
          type: string
          example: 'example@mail.com'
        redirect_url:
          type: string
          example: 'app.wellbe.club'  
    jwt_tokens:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
    auth:
      type: object
      properties:
        email:
          type: string
        password:
          type: string  
    emailcheck:
      type: object
      properties:
        email:
          type: string
    registrition:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
    event:
      type: object
      properties:
        start_time:
          type: string
          description: 'iso date time'
          example: '2021-02-15T15:00+05:00'  
        stop_time:
          type: string
          description: 'iso date time'
          example: '2021-02-15T15:00+05:00'  
        external_link_to_event:
          type: string
          description: 'external url'
          example: 'https://vk.com'
        is_public:
          type: boolean
          description: ''
        event_master:
          type: integer
          description: 'user_id'
        event_name:
          type: string
          description: ''
        event_slaves:
          type: array
          description: ''
          items:
            type: integer
            description: 'user_id'
        labels:
          type: array
          description: ''
          items:
            type: integer
            description: 'label_id'
    post:
      type: object
      properties:
        title:
          type: string
        text:
          type: string
        images:
          type: array
          items:
            type: integer
            description: image_id
    comment:
      type: object
      properties:
        post:
          type: integer
          description: post_id
        text:
          type: string
        images:
          type: array
          items:
            type: integer
            description: image_id
          
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header

paths:
  /users/auth/sign_up/check_email/:
    post:
        description: 'Проверяет, доступен ли такой емаил в системе'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emailcheck'
        responses:
          '202':
            description: Not already used - OK
          '403':
            description: Already used
          '400':
            description: Invalid request 
        tags:
          - users

  /users/auth/sign_up/me/:
    post:
        description: 'Регистрирует пользователя'
        parameters:
        - in: query
          name: redirect_url
          description: Домен, на который должна вести ссылка из письма с подтверждением
          required: true
          schema:
            type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registrition'
        responses:
          '201':
            description: User created
          '400':
            description: Invalid request 
        tags:
          - users

  /users/auth/sign_up/confirm_email/:
    post:
        description: 'Повторно отправляет письмо с ссылкой для подтверждения аккаунта'
        parameters:
        - in: query
          name: redirect_url
          description: Домен, на который должна вести ссылка из письма с подтверждением
          required: true
          schema:
            type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registrition'
        responses:
          '201':
            description: User created
          '400':
            description: Invalid request 
        tags:
          - users

  /users/auth/sign_up/confirm_email/{token}:
    get:
      description: 'Подтверждает аккаунт'
      parameters:
      - in: path
        description: Token from confirmation email
        required: true
        name: token
        schema:
          type: string
      responses:
        '200':
          description: Confirmed
        '400':
          description: Bad Token
      tags:
        - users
  /social/phone/:
    post:
        description: 'Вход в систему по номеру телефона, если номера нет, регается юзер'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/phone_auth"
        responses:
          '200':
            description: Пользователь существует, код отправлен
          '201':
            description: Новый пользователь создан, код отправлен   
        tags:
          - users
  /social/phone/auth:
    post:
        description: 'Вход в систему по номеру телефона, если номера нет, регается юзер'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/phone_login"
        responses:
          '200':
            description: Вход выполнен, токены отправлены
          '401':
            description: Вход не выполнен, подробности в msg
        tags:
          - users
  
  /o/token/:
    post:
      description: Обновить токен
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/refresh'
      responses:
        '200':
          description: Authorized
  
  /o/convert-token/:
    post:
      description: Вход через соцсети
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/social'
      responses:
        '200':
          description: Authorized

  /users/auth/reset_password:
    post:
      description: 'Отправляет email с ссылкой для сброса пароля'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reset_password'
      responses:
        200:
          description: OK
        401:
          description: Bad request
      tags:
        - users

  /users/auth/reset_password/{reset_token}:
    post:
      description: 'Сбрасывает пароль'
      parameters:
      - in: path
        description: Token from reset_password email
        required: true
        name: reset_token
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refresh_password'    
      responses:
        '200':
          description: password refreshed
        '400':
          description: Bad request
      tags:
        - users

  /users/auth/me:
    get:
      security: 
        - Bearer: []   
      description: 'Получить данные своего аккаунта'  
      responses:
        '200':
          description: password refreshed
        '400':
          description: Bad request
      tags:
        - users

  /users/info/{user_id}:
    get:
      security: 
        - Bearer: []   
      description: 'Получить данные аккаунта'
      parameters:
      - in: path
        description: user_id
        required: true
        name: user_id
        schema:
          type: integer  
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
      tags:
        - users

  /users/addresses/my:
    get:
      security: 
        - Bearer: []   
      description: 'Получить список моих адресов'
      responses:
        '200':
          description: OK
      tags:
        - users

  /users/addresses/create:
    post:
      security: 
        - Bearer: []   
      description: 'Создать адрес'
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/address"
      responses:
        '200':
          description: OK
      tags:
        - users

  /users/addresses/{address_id}:
    patch:
      security: 
        - Bearer: []   
      description: 'Изменить адрес'
      parameters:
      - in: path
        description: address_id
        required: true
        name: address_id
        schema:
          type: integer  
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/address"
      responses:
        '200':
          description: OK
        '404':
          description: Address does not exist
      tags:
        - users
    delete:
      security: 
        - Bearer: []   
      description: 'Удалить адрес'
      parameters:
      - in: path
        description: address_id
        required: true
        name: address_id
        schema:
          type: integer  
      responses:
        '200':
          description: OK
        '404':
          description: Address does not exist
      tags:
        - users

  /users/info/table:
    get:
      security: 
        - Bearer: []   
      description: 'Получить данные аккаунта'
      parameters:
      - in: query
        description: сколько пользователей выводить за один запрос
        required: false
        example: 50
        name: limit
        schema:
          type: integer
      - in: query
        description: номер страницы
        required: false
        example: 1
        name: page
        schema:
          type: integer
      - in: query
        description: показывать только тех клиентов, кто связан со мной 
        required: false
        example: false
        name: only_my_clients
        schema:
          type: boolean
      - in: query
        description: строка поиска, ищет по имени и почте
        required: false
        example: "Wellbe"
        name: q
        schema:
          type: string
      - in: query
        description: id роли
        required: false
        example: 1
        name: role_id
        schema:
          type: integer
      - in: query
        description: id специалиста
        required: false
        example: 1
        name: expert_id
        schema:
          type: integer
      - in: query
        description: id кама
        required: false
        example: 1
        name: coach_id
        schema:
          type: integer               

      responses:
        '200':
          description: OK
      tags:
        - users

  /users/{user_id}/experts:
    get:
      security: 
        - Bearer: []   
      description: 'Получить специалистов аккаунта'
      parameters:
      - in: path
        description: user_id
        required: true
        name: user_id
        schema:
          type: integer  
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
      tags:
        - users

    post:
      security: 
        - Bearer: []   
      description: 'Добавить специалистов'
      parameters:
      - in: path
        description: user_id
        required: true
        name: user_id
        schema:
          type: integer 
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/add_expert"
      responses:
        200:
          description: 'OK'
      tags:
        - users

    delete:
      security: 
        - Bearer: []   
      description: 'Удалить специалистов'
      parameters:
      - in: path
        description: user_id
        required: true
        name: user_id
        schema:
          type: integer 
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/add_expert"
      responses:
        200:
          description: 'OK'
      tags:
        - users

    put:
      security: 
        - Bearer: []   
      description: 'Заменить специалистов'
      parameters:
      - in: path
        description: user_id
        required: true
        name: user_id
        schema:
          type: integer 
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/add_expert"
      responses:
        200:
          description: 'OK'
      tags:
        - users              
  /labels/label/actionlabeluser:
    post:
      security:
        - Bearer: []
      description: 'Добавляет метку пользователю'
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/label_user"
      responses:
        200:
          description: 'OK'
      tags:
        - label

    delete:
      security:
        - Bearer: []
      description: 'Удаляет метку у пользователя'
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/label_user"
      responses:
        200:
          description: 'OK'
      tags:
        - label

  /labels/label/{label_id}:
    get:
      security: 
        - Bearer: []   
      description: 'Получить метку'
      parameters:
      - in: path
        description: label_id
        required: true
        name: label_id
        schema:
          type: integer  
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
      tags:
        - label

  /labels/:
    get:
      security: 
        - Bearer: []   
      description: 'Получить все метки'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
      tags:
        - label

    post:
      security:
        - Bearer: []
      description: 'Создать метку'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/label"
      responses:
        200:
          description: 'OK'
      tags:
        - label
  /colors:
    get:
      description: 'Получить все цвета'
      responses:
        200:
          description: 'OK'
      tags:
        - color

  /products/{product_id}:
    get:
      description: 'Дает данные о продукте'
      parameters:
        - in: path
          required: true
          name: product_id
          schema:
            type: integer
      responses:
        200:
          description: 'OK'
      tags:
        - products
  
  /products/rate:
    post:
      security:
        - Bearer: []
      description: 'Оценить товар'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  example: 1
                rating:
                  type: integer
                  example: 3
                  description: 'В пределах 0 - 5'
      responses:
        200:
          description: 'OK'
      tags:
        - products

  /texts/{text_id}:
    get:
      description: 'Дает строку текста'
      parameters:
        - in: path
          required: true
          name: text_id
          example: 1
          schema:
            type: integer
      responses:
        200:
          description: 'OK'

  /worksheets/buying/start_twins:
    get:
      security:
        - Bearer: []
      description: 'Отправить стартовую анкету по твинам'
      parameters:
        - in: query
          name: session_id
          description: session_id
          example: 7
          schema:
            type: integer
        - in: query
          name: change_user_name
          description: change_user_name
          example: 'true'
          schema:
            type: string
        - in: query
          name: change_user_email
          description: change_user_email
          example: 'true'
          schema:
            type: string
      responses:
        200:
          description: 'OK'
      tags:
        - forms
  
  /products:
    get:
      security:
        - Bearer: []
      description: 'Поиск продуктов'
      parameters:
      - in: query
        description: 'Строка поиска'
        required: false
        example: "жИзНь"
        name: search
        schema:
          type: string
      - in: query
        description: page_size
        required: false
        example: 75
        name: page_size
        schema:
          type: integer
      - in: query
        description: page
        required: false
        example: 1
        name: page
        schema:
          type: integer
      - in: query
        description: min_price
        required: false
        example: 1000
        name: min_price
        schema:
          type: integer
      - in: query
        description: min_price
        required: false
        example: 100
        name: min_price
        schema:
          type: integer
      - in: query
        description: категории
        required: false
        example: 1
        name: category
        schema:
          type: array
          items: 
            type: string
            description: category name
            example: "Vitamins"

      responses:
        '200':
          description: OK
      tags:
        - products
  
  /products/twins/recommendations/all:
    get:
        security:
          - Bearer: []
        description: 'Получить рекомендации товаров по всем категориям'
        parameters:
        - in: query
          description: 'user_id'
          required: true
          example: 13
          name: user_id
          schema:
            type: integer
        - in: query
          description: 'Сколько категорий показать'
          required: false
          example: 10
          name: page_size
          schema:
            type: integer
        - in: query
          description: 'Сколько товаров в каждой категории'
          required: false
          example: 5
          name: limit
          schema:
            type: integer
        - in: query
          description: 'Номер страницы'
          required: false
          example: 2
          name: page
          schema:
            type: integer
        responses:
          '200':
            description: OK
        tags:
        - products
  
  /products/twins/recommendations/category:
    get:
        security:
          - Bearer: []
        description: 'Получить рекомендации товаров по всем категориям'
        parameters:
        - in: query
          description: 'user_id'
          required: true
          example: 13
          name: user_id
          schema:
            type: integer
        - in: query
          description: 'Сколько товаров показать'
          required: false
          example: 10
          name: page_size
          schema:
            type: integer
        - in: query
          description: 'ID Категории'
          required: true
          example: 8
          name: category_id
          schema:
            type: integer
        - in: query
          description: 'Номер страницы'
          required: false
          example: 2
          name: page
          schema:
            type: integer
        responses:
          '200':
            description: OK
        tags:
        - products
  
  /surveys/v2/survey/{survey_uuid}/start:
    post:
      description: 'Сгенерировать сессию для анкеты'
      parameters:
        - in: path
          required: true 
          name: survey_uuid
          schema:
            type: string
            description: 'survey_uuid'
            example: '539843f3-051a-4b19-9082-0376a6a18280'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/surveyanswers"  
      responses:
        '200':
          description: OK
      tags:
        - surveys
  
  /surveys/sessions:
    get:
      security:
        - Bearer: []
      description: 'Получить все сессии. Если не указан user_id, пользователь берется по токену. Чтобы понять, проходил ли юзер анкеты раньше, поставь only_finished=true и если в ответе будет пустой массив, значит юзер ничего не проходил'
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
            description: 'user_id'
            example: 1
        - in: query
          name: only_finished
          schema:
            type: string
            description: 'Если true, показываются только завершенные анкеты'
            example: 'true'
      responses:
        '200':
          description: OK
      tags:
        - surveys

  /surveys/v2/session/{session_id}/current:
    get:
      description: 'Получить текущую страницу сессии'
      parameters:
        - in: path
          required: true 
          name: session_id
          schema:
            type: integer
            description: 'session_id'
            example: 4
      responses:
        '200':
          description: OK
      tags:
        - surveys
  
  /surveys/v2/session/{session_id}/next:
    post:
      description: 'Отправить ответы и перейти на следующую страницу в сессии'
      parameters:
        - in: path
          required: true 
          name: session_id
          schema:
            type: integer
            description: 'session_id'
            example: 4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/surveyanswers"             
      responses:
        '200':
          description: OK
      tags:
        - surveys
  
  /surveys/v2/session/{session_id}/return:
    post:
      description: 'Отправить ответы и перейти на предыдущую страницу в сессии'
      parameters:
        - in: path
          required: true 
          name: session_id
          schema:
            type: integer
            description: 'session_id'
            example: 4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/surveyanswers"             
      responses:
        '200':
          description: OK
      tags:
        - surveys
  
  /diaries:
    get:
      security:
        - Bearer: []
      description: 'Получить дневники'
      parameters:
        - in: query
          name: owner
          description: Владелец дневника (Профиль)
          required: false
          schema:
            type: integer
            description: twin_profile_id
        - in: query
          name: owner__user__id
          description: Владелец дневника (User)
          required: false
          schema:
            type: integer
            description: user__id
        - in: query
          name: category
          description: Тип дневника
          required: false
          schema:
            type: string
            description: 'side or main'
            example: main
        - in: query
          name: id
          description: id дневника
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: is_public
          description: Публичный ли дневник
          required: false
          schema:
            type: string
            example: true
      responses:
        '200':
          description: OK
      tags:
        - beauty-twins
  
  /diaries/{diary_id}:
    get:
      security:
        - Bearer: []
      description: 'Получить дневник'
      parameters:
      - in: path
        required: true 
        name: diary_id
        schema:
          type: integer
          description: 'diary_id'
          example: 1
      responses:
        '200':
          description: OK
      tags:
        - beauty-twins
    delete:
      security:
        - Bearer: []
      description: 'Удалить дневник'
      parameters:
      - in: path
        required: true 
        name: diary_id
        schema:
          type: integer
          description: 'diary_id'
          example: 1
      responses:
        '200':
          description: OK
      tags:
        - beauty-twins
  
  /diaries/{diary_id}/edit:
    patch:
      security:
        - Bearer: []
      description: 'Изменить дневник'
      parameters:
      - in: path
        required: true 
        name: diary_id
        schema:
          type: integer
          description: 'diary_id'
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/diary"
      responses:
        '200':
          description: OK
      tags:
        - beauty-twins
  
  /diaries/create:
    post:
      security:
        - Bearer: []
      description: 'Создать дневник'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/diary"
      responses:
        '200':
          description: OK
      tags:
        - beauty-twins
  
  /users/twins/all:
    get:
      security:
        - Bearer: []
      description: 'Получить близнецов'
      parameters:
      - in: query
        required: true 
        name: user_id
        schema:
          type: integer
          description: 'user_id'
          example: 1
      responses:
        '200':
          description: OK
      tags:
        - beauty-twins
  
  /users/twins/profile/{user_id}:
    get:
      security:
        - Bearer: []
      description: 'Получить профиль близнеца'
      parameters:
      - in: path
        required: true 
        name: user_id
        schema:
          type: integer
          description: 'user_id'
          example: 1
      responses:
        '200':
          description: OK
      tags:
        - beauty-twins
  
  /users/twins/profile/{user_id}/upload_avatar:
    post:
      security:
        - Bearer: []
      description: 'Поставить аватарку профилю'
      parameters:
        - in: path
          required: true 
          name: user_id
          schema:
            type: integer
            description: 'user_id'
            example: 1
        - in: query
          name: skip
          schema:
            type: string
            description: 'Ставить ли плейсхолдер'
            example: false
        - in: query
          name: compress
          required: false
          schema:
            type: string
            description: 'Сжать ли исходное изображение'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: # Request parts
                image:
                  type: string
                  format: binary
            encoding: # The same level as schema
              image: # Property name (see above)
                contentType: image/png, image/jpeg, image/svg, image/gif, image/webp

      responses:
        '200':
          description: OK
      tags:
        - beauty-twins
  
  /diaries/actions:
    post:
      security:
        - Bearer: []
      description: 'Добавить товары в дневник. Если указан user_id, то товары попадут в main дневник пользователя. Если указано два параметра, приоритет отдается diary_id'
      parameters:
      - in: query
        name: diary_id
        schema:
          type: integer
          description: 'diary_id'
          example: 1
      - in: query
        name: user_id
        schema:
          type: integer
          description: 'user_id'
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/diary-action"
      responses:
        '200':
          description: OK
        '400':
          description: Укажите diary_id или user_id
      tags:
        - beauty-twins
    delete:
      security:
        - Bearer: []
      description: 'Удалить товары из дневникв. Если указан user_id, то товары удалятся из main дневника пользователя. Если указано два параметра, приоритет отдается diary_id'
      parameters:
      - in: query
        name: diary_id
        schema:
          type: integer
          description: 'diary_id'
          example: 1
      - in: query
        name: user_id
        schema:
          type: integer
          description: 'user_id'
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/diary-action"
      responses:
        '200':
          description: OK
        '400':
          description: Укажите diary_id или user_id
      tags:
        - beauty-twins

  /posts/create:
    post:
      security:
        - Bearer: []
      description: 'Создать пост'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post"
      responses:
        '200':
          description: OK
      tags:
        - community
  
  /comments/create:
    post:
      security:
        - Bearer: []
      description: 'Создать коммент'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/comment"
      responses:
        '200':
          description: OK
      tags:
        - community
  
  /posts/:
    get:
      security:
        - Bearer: []
      description: 'Получить список постов'
      parameters:
      - in: query
        name: creator
        schema:
          type: integer
          description: 'user_id'
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: min_datetime
        schema:
          type: string
          description: 'ISO datetime'
          example: '2020-11-09T10:52:44.751187Z'
      - in: query
        name: max_datetime
        schema:
          type: string
          description: 'ISO datetime'
          example: '2023-11-09T10:52:44.751187Z'
      - in: query
        name: page_size
        schema:
          type: integer
      - in: query
        name: ordering
        schema:
          type: string
          # oneOf:
          #   - id
          #   - -id
          #   - created_at
          #   - -created_at
      responses:
        '200':
          description: OK
      tags:
        - community

  /comments/:
    get:
      security:
        - Bearer: []
      description: 'Получить список постов'
      parameters:
      - in: query
        name: creator
        schema:
          type: integer
          description: 'user_id'
      - in: query
        name: post__id
        schema:
          type: integer
      - in: query
        name: page_size
        schema:
          type: integer
      - in: query
        name: ordering
        schema:
          type: string
          # oneOf:
          #   - id
          #   - -id
          #   - created_at
          #   - -created_at
      responses:
        '200':
          description: OK
      tags:
        - community
  
  /posts/{post_id}:
    get:
      security:
        - Bearer: []
      description: 'Получить пост'
      parameters:
      - in: path
        required: true 
        name: post_id
        schema:
          type: integer
          description: 'post_id'
          example: 1
      responses:
        '200':
          description: OK
      tags:
        - community
    delete:
      security:
        - Bearer: []
      description: 'Удалить пост (only if you owner)'
      parameters:
      - in: path
        required: true 
        name: post_id
        schema:
          type: integer
          description: 'post_id'
          example: 1
      responses:
        '204':
          description: OK
      tags:
        - community
    patch:
      security:
        - Bearer: []
      description: 'Обновить пост'
      parameters:
      - in: path
        required: true 
        name: post_id
        schema:
          type: integer
          description: 'post_id'
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post"
      responses:
        '200':
          description: OK
      tags:
        - community
  
  /comments/{comment_id}:
    get:
      security:
        - Bearer: []
      description: 'Получить коммент'
      parameters:
      - in: path
        required: true 
        name: comment_id
        schema:
          type: integer
          description: 'comment_id'
          example: 1
      responses:
        '200':
          description: OK
      tags:
        - community
    delete:
      security:
        - Bearer: []
      description: 'Удалить коммент (only if you owner)'
      parameters:
      - in: path
        required: true 
        name: comment_id
        schema:
          type: integer
          description: 'comment_id'
          example: 1
      responses:
        '204':
          description: OK
      tags:
        - community

  /images/upload:
    post:
      security:
        - Bearer: []
      description: 'Поставить аватарку профилю'
      parameters:
        - in: path
          required: true 
          name: user_id
          schema:
            type: integer
            description: 'user_id'
            example: 1
        - in: query
          name: skip
          schema:
            type: string
            description: 'Ставить ли плейсхолдер'
            example: false
        - in: query
          name: compress
          required: false
          schema:
            type: string
            description: 'Сжать ли исходное изображение'
            example: 'true'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: # Request parts
                image:
                  type: string
                  format: binary
            encoding: # The same level as schema
              image: # Property name (see above)
                contentType: image/png, image/jpeg, image/svg, image/gif, image/webp
      responses:
        '200':
          description: OK
  
  /referals/usertoken:
    get:
      security:
        - Bearer: []
      description: 'Получить реферальный код'
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            type: integer
            description: 'user_id'
            example: 1
      responses:
        '200':
          description: OK
      tags:
        - referals
  
  /billing/useraccount:
    get:
      security:
        - Bearer: []
      description: 'Получить баланс на счету'
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            type: integer
            description: 'user_id'
            example: 1
      responses:
        '200':
          description: OK
      tags:
        - billing